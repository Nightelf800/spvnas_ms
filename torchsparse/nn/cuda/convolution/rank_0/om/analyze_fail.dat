# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.dat to get more instructions.
# ===============================================================================

# [No.1] construct_wrapper.1
# In file /home/nightelf/桌面/Project/spvnas_ms/torchsparse/nn/cuda/convolution/sp_convolution.py(33)/    def construct(self, in_feat, out_feat, kernel, neighbor_map, neighbor_offset, transpose):/
funcgraph fg_1(
        %para1 : Tensor(F32)[1000, 4]    # in_feat
        , %para2 : Tensor(F32)[1000, 32]    # out_feat
        , %para3 : Tensor(F32)[27, 4, 32]    # kernel
        , %para4 : Tensor(I32)[1002, 2]    # neighbor_map
        , %para5 : Tensor(I32)[27]    # neighbor_offset
        , %para6 : Bool    # transpose
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_2(%para1, %para2, %para3, %para4, %para5, %para6)    #(Tensor(F32)[1000, 4], Tensor(F32)[1000, 32], Tensor(F32)[27, 4, 32], Tensor(I32)[1002, 2], Tensor(I32)[27], Bool)    # fg_2=construct.2 #scope: Default
#[CNode]3
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /home/nightelf/桌面/Project/spvnas_ms/torchsparse/nn/cuda/convolution/sp_convolution.py(35)/        return self.spconvolution(in_feat, out_feat, kernel, neighbor_map, neighbor_offset, transpose)/#[CNode]4
}
# order:
#   1: construct_wrapper.1:[CNode]3{[0]: ValueNode<FuncGraph> construct.2, [1]: in_feat, [2]: out_feat, [3]: kernel, [4]: neighbor_map, [5]: neighbor_offset, [6]: transpose}
#   2: construct_wrapper.1:[CNode]4{[0]: ValueNode<Primitive> Return, [1]: [CNode]3}


# [No.2] construct.2
# In file /home/nightelf/桌面/Project/spvnas_ms/torchsparse/nn/cuda/convolution/sp_convolution.py(33)/    def construct(self, in_feat, out_feat, kernel, neighbor_map, neighbor_offset, transpose):/
funcgraph fg_2(
        %para7 : Tensor(F32)[1000, 4]    # in_feat
        , %para8 : Tensor(F32)[1000, 32]    # out_feat
        , %para9 : Tensor(F32)[27, 4, 32]    # kernel
        , %para10 : Tensor(I32)[1002, 2]    # neighbor_map
        , %para11 : Tensor(I32)[27]    # neighbor_offset
        , %para12 : Bool    # transpose
    ) {
    %1 : Tensor(I32)[1] = DoSignaturePrimitive::S-Prim-Print{prim_type=1}[side_effect_io=Bool(1)]("---cuda_begin---")    #(String) #scope: Default
      # In file /home/nightelf/桌面/Project/spvnas_ms/torchsparse/nn/cuda/convolution/sp_convolution.py(34)/        print("---cuda_begin---")/#[CNode]5
    %2 : Tensor(I32)[1] = Primitive::stop_gradient{prim_type=1}(%1)    #(Tensor(I32)[1]) #scope: Default
#[CNode]6

#------------------------> 1
    %3 = DoSignaturePrimitive::S-Prim-Custom{prim_type=1}[imply_path="", func_type="aot", uniq_name="Custom_./convolution_cuda.so:convolution_forward_ms", single_scalar_output=Bool(0), func_name="./convolution_cuda.so:convolution_forward_ms", fake_output=Bool(0), autodiff=Bool(0)](%para7, %para8, %para9, %para10, %para11, %para12)    #(Tensor(F32)[1000, 4], Tensor(F32)[1000, 32], Tensor(F32)[27, 4, 32], Tensor(I32)[1002, 2], Tensor(I32)[27], Bool) #scope: Default
      # In file /home/nightelf/桌面/Project/spvnas_ms/torchsparse/nn/cuda/convolution/sp_convolution.py(35)/        return self.spconvolution(in_feat, out_feat, kernel, neighbor_map, neighbor_offset, transpose)/#[CNode]7
    %4 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%3, %2)    #(Undefined, Tensor(I32)[1]) #scope: Default
#[CNode]8
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default
      # In file /home/nightelf/桌面/Project/spvnas_ms/torchsparse/nn/cuda/convolution/sp_convolution.py(35)/        return self.spconvolution(in_feat, out_feat, kernel, neighbor_map, neighbor_offset, transpose)/#[CNode]9
}
# order:
#   1: construct.2:[CNode]5{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Print, [1]: ValueNode<StringImm> ---cuda_begin---}
#   2: construct.2:[CNode]7{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Custom, [1]: in_feat, [2]: out_feat, [3]: kernel, [4]: neighbor_map, [5]: neighbor_offset, [6]: transpose}
#   3: construct.2:[CNode]9{[0]: ValueNode<Primitive> Return, [1]: [CNode]8}


#===============================================================================
# num of function graphs in stack: 2/3 (Ignored 1 internal frames).
